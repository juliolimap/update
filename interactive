#!/bin/bash
depend_procedure core base # esp for auto_network, intro and set_clock workers
VERSION=160

GAS_PATH=$(dirname "$(readlink -f $0)")
GAT_PATH=/opt/gatools/
GAT_INC="$GAT_PATH"/include
source "$GAT_INC"/includes.sh

# Auto Partition
RAN_AUTOPART=no
AUTO_DRIVE=NONE

# Drives
INSTALL_DRIVE=
BOOT_DRIVE=
ROOT_DRIVE=
HOME_DRIVE=
SWAP_DRIVE=
ROMS_DRIVE=

# Setup Options
NETWORK_SETUP=0
AUDIO_SETUP=0
SYSTEM_SETUP=0
VIDEO_SETUP=0

# This is a port of the original /arch/setup script.  It doesn't use aif phases but uses it's own menu-based flow (phase) control

BLOCK_ROLLBACK_USELESS=1

DOING_INSTALL=0

# clock
HARDWARECLOCK=
TIMEZONE=

PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin

start_process() {
  #####################
  ## begin execution ##
  ##execute worker intro

  if [ ! -d "$CONFIG_DIR" ]; then
    mkdir -p $CONFIG_DIR
    touch $CONFIG_FILE
    chown arcade.nobody $CONFIG_FILE
  fi

  execute worker configure

  if [ -f "/home/arcade/1" ]; then
    amixer sset -c 0 PCM 200 unmute 2>&1 0>&1 >/dev/null
    amixer sset -c 0 Master 100% unmute 2>&1 0>&1 >/dev/null
    amixer sset -c 0 Front 100% unmute 2>&1 0>&1 >/dev/null
  fi
  
  # Show welcome message if we're on the ISO
  if [[ $(lsblk --include 7 | grep "archiso" | wc -l) == 1 ]] ; then
    execute worker intro
    isomainmenu
  else
    mainmenu
  fi

}


# This menu is called from the ISO
isomainmenu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "LiveCD Menu" "Setup MegaTech Linux" required \
      1 "Live CD - test GroovyArcade" \
      2 "HD Installation" \
      3 "Shutdown / Reboot" \
      4 "Exit to Shell" || ANSWER_OPTION=8
    case $ANSWER_OPTION in
      "1") execute worker start_fe && default=1 ;;
      "2") execute worker select_install && default=1 ;;
      "3") execute worker power_menu && default=5 ;;
      "4") execute worker msg_report ;;
      *) execute worker abort_installer ;;
    esac
  done
}


mainmenu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Main Menu" "Setup MegaTech Linux" required \
      1 "Iniciar Multijogos" \
      2 "Configurar (video, audio, Internet)" \
      3 "Abrir Desktop" \
      4 "Reiniciar" \
      5 "Ativar Multijogos" \
      6 "Instalar Emulador" \
      7 "Update Multijogos"
    case $ANSWER_OPTION in
      "1") execute worker start_fe && default=1 ;;
      "2") execute worker setup_menu && default=1 ;;
      "3") execute worker start_lxde && default=3 ;;
      "4") execute worker power_menu && default=4 ;;
      "5") execute worker power_ativa ;;
      "6") execute worker instal_system ;;  
      "7") execute worker power_atualizar ;;
      *) execute worker abort_installer ;;
    esac
  done

  return 0
}


check_for_home() {
  if [ ! -d "/mnt/gahome" ]; then
    mkdir /mnt/gahome
  fi

  DRIVES=$(fdisk -l | grep ^/dev/ | grep "83 Linux" | sed -e s/\*//g | awk '{printf("%s ", $1)}')
  FOUNDHOME=0
  HOMEDRIVE=
  for partition in $DRIVES; do
    ISMNT=$(grep $partition /etc/mtab)
    if [ "$ISMNT" = "" ]; then
      inform "Checking $partition for home directory"
      sudo umount $partition >/dev/tty12 2>&1
      mount $partition /mnt/gahome
      if [ -f "/mnt/gahome/.config/ga.conf" ]; then
        FOUNDHOME=1
        HOMEDRIVE=$partition
      fi
      umount /mnt/gahome
    fi
  done

  if [ "$HOMEDRIVE" != "" ]; then
    PREV=yes
    inform "Found home partition $HOMEDRIVE"
    sleep 2
    ask_yesno "Previous installation found. Do you want to use?" || PREV=no
    if [ "${PREV}" = "yes" ]; then
      sudo umount $HOMEDRIVE >/dev/tty12 2>&1
      mount $HOMEDRIVE /home/arcade
      HOME_DRIVE=$HOMEDRIVE
    else
      sudo umount $HOMEDRIVE >/dev/tty12 2>&1
      HOME_DRIVE=""
    fi

  fi

  return 0
}


worker_installpartition() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "HD Installation and Partition Tools" "Setup Groovy Arcade Linux" required \
      1 "Choose Partitions (home, roms, swap)" \
      2 "Hard Drive Installation" \
      3 "Partition Manager (CAUTION!)" \
      4 "Return to Main" || return
    case $ANSWER_OPTION in
      "1") execute worker livecd_menu && default=2 ;;
      "2") execute worker select_install && default=3 ;;
      "3") execute worker partition_disks && default=4 ;;
      "4") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}

worker_livecd_menu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Choose Partitions (home, swap, roms)" "Choose Partitions" required \
      1 "Choose partition as home/arcade" \
      2 "Choose partition as swap drive" \
      3 "Choose partition as ROM/Snap drive" \
      4 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker select_home && default=2 ;;
      "2") execute worker select_swap && default=3 ;;
      "3") execute worker select_roms && default=4 ;;
      "4") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}


worker_system_menu() {
  local default=no
  SYSTEM_SETUP=1
  while [ 0 = 0 ]; do
    ask_option $default "Configuration Menu" "System Configuration" required \
      1 "Password" \
      2 "Language/Keyboard" \
      3 "SwitchRes manual settings" \
      4 "GroovyMAME manual settings" \
      5 "AdvanceMenuPlus manual settings" \
      6 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker select_passwd && default=2 ;;
      "2") execute worker select_language_menu && default=3 ;;
      "3") execute worker edit_switchres && default=4 ;;
      "4") execute worker edit_mame && default=5 ;;
      "5") execute worker edit_advmenu && default=6 ;;
      "6") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done
  return 0
}


worker_setup_menu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Configurar (video, audio, Internet)" "" required \
      1 "Video Configurar" \
      2 "Audio Configurar" \
      3 "Internet Configurar" \
      4 "Joystick Configurar" \
      5 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker video_menu && default=2 ;;
      "2") execute worker audio_menu && default=3 ;;
      "3") execute worker network_menu && default=4 ;;
      "4") execute worker joystick_menu && default=5 ;;
      "5") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}

worker_power_atari() {
clear
wget https://download1638.mediafire.com/p0003u4iodyg/3zazm7m9l69msug/Atari.7z


7z x  Atari.7z -o/home/arcade/shared/roms
rm -r Atari.7z
 

cp -r "/home/arcade/shared/frontends/attract/emulators/base add emulador/atari2600.cfg" "/home/arcade/shared/frontends/attract/emulators/"
 sudo chmod -R 777 /home/arcade/shared/roms/Atari

}

worker_power_atomis() {
clear
wget http://download2282.mediafire.com/azk0pvxnc64g/kqdomb6k0k1kqzv/atomiswave.7z
7z x atomiswave.7z -o/home/arcade/shared/roms
 
sudo rm -r atomiswave.7z
sudo chmod -R 777 /home/arcade/shared/roms/atomiswave
sudo cp -r "/home/arcade/shared/frontends/attract/emulators/base add emulador/Sammy Atomiswave.cfg" "/home/arcade/shared/frontends/attract/emulators/"

}

worker_power_master() {
clear
wget http://download847.mediafire.com/b7bs3pq1yshg/vqq3qxvrh1n78nm/mastersystem.7z
7z x mastersystem.7z -o/home/arcade/shared/roms
 
sudo rm -r mastersystem.7z
sudo chmod -R 777 /home/arcade/shared/roms/mastersystem

sudo cp -r "/home/arcade/shared/frontends/attract/emulators/base add emulador/master.cfg" "/home/arcade/shared/frontends/attract/emulators/"


}
worker_power_snes() {
clear
wget http://download848.mediafire.com/tavcvfx5jikg/ssis7rmokwoxmfq/snes.7z
7z x snes.7z -o/home/arcade/shared/roms
 
sudo rm -r snes.7z
sudo chmod -R 777 /home/arcade/shared/roms/snes
sudo cp -r "/home/arcade/shared/frontends/attract/emulators/base add emulador/snes.cfg" "/home/arcade/shared/frontends/attract/emulators/"
}


worker_power_mega() {
clear
wget http://download1079.mediafire.com/qaaq4h586t0g/q2g9xamloy1s1b0/megadrive.7z
      
7z x megadrive.7z -o/home/arcade/shared/roms
 
sudo rm -r megadrive.7z
sudo chmod -R 777 /home/arcade/shared/roms/megadrive
sudo cp -r "/home/arcade/shared/frontends/attract/emulators/base add emulador/megadrive.cfg" "/home/arcade/shared/frontends/attract/emulators/"
}


worker_power_nes() {
clear
wget https://download1324.mediafire.com/o60h58mockrg/49es6b333ztspxq/nes.7z
7z x nes.7z -o/home/arcade/shared/roms
 
sudo rm -r nes.7z
sudo chmod -R 777 /home/arcade/shared/roms/nes
sudo cp -r "/home/arcade/shared/frontends/attract/emulators/base add emulador/nes.cfg" "/home/arcade/shared/frontends/attract/emulators/"
}


worker_power_psx() {
clear
wget https://download844.mediafire.com/isaq2jyozk2g/0pttowjsrtkpzh1/psx.7z
7z x psx.7z -o/home/arcade/shared/roms
 
sudo rm -r psx.7z
sudo chmod -R 777 /home/arcade/shared/roms/psx
sudo cp -r "/home/arcade/shared/frontends/attract/emulators/base add emulador/psx.cfg" "/home/arcade/shared/frontends/attract/emulators/"
}


worker_power_naomi() {
clear
7z x naomi.7z -o/home/arcade/shared/roms
 
sudo rm -r naomi.7z
sudo chmod -R 777 /home/arcade/shared/roms/naomi
sudo cp -r "/home/arcade/shared/frontends/attract/emulators/base add emulador/SEGA Naomi.cfg" "/home/arcade/shared/frontends/attract/emulators/"
}

worker_instal_system() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Instalar emulador (requer espaco)" "" required \
      1 "Download Atari 2600 " \
      2 "Download Atomiswave" \
      3 "Download Master System" \
      4 "Download Super Nintendo" \
      5 "Download Megadrive" \
      6 "Download Nintendinho" \
      7 "Download Playstation" \
      8 "Download Naomi" \
      9 "Voltar ao Menu" || return

    case $ANSWER_OPTION in
      "1") execute worker power_atari && default=2 ;;
      "2") execute worker power_atomis && default=3 ;;
      "3") execute worker power_master && default=4 ;;
      "4") execute worker power_snes && default=5 ;;
      "5") execute worker power_mega && default=6 ;;
      "6") execute worker power_nes && default=7 ;;
      "7") execute worker power_psx && default=7 ;;
      "8") execute worker power_naomi && default=7 ;;
      "9") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}












worker_edit_switchres() {
  nano -R /home/arcade/switchres.conf
  return 0
}

worker_edit_mame() {
  nano -R /home/arcade/mame.ini
}

worker_edit_advmenu() {
  nano -R /home/arcade/.advance/advmenup.rc
}

worker_select_language_menu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Language Menu" "Setup Language/Keyboard" required \
      1 "Locale" \
      2 "Keyboard" \
      3 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker select_locale && default=2 ;;
      "2") execute worker select_keyboard && default=3 ;;
      "3") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}

worker_select_locale() {
  # /usr/share/i18n/SUPPORTED
  if [ -f "/home/arcade/1" ]; then
    notify "You can only change the language on an installed system. Not in the LiveCD"
    return 1
  fi
  notify "See /usr/share/i18n/SUPPORTED for supported locales"
  nano -R /etc/locale.gen
  nano -R /etc/locale.conf
  inform "Generating new locales You will need to reboot for the changes to take effect."
  LOCALE=$(cat /etc/locale.conf | sed -e "s/#.*//g")
  locale-gen -a
  localectl set-locale $LOCALE
  #notify "You will need to set LANG or LOCALE environment variables in ~/.bash_profile"
  return 0
}

worker_select_keyboard() {
  CURKEYMAP=$(cat /etc/vconsole.conf | grep KEYMAP= | sed -e 's/KEYMAP=//g' | sed -e 's/\=//g')

  ask_string "Set keymap:" "$CURKEYMAP" || return 1

  KEYMAP=${ANSWER_STRING// /}

  cat $CONFIG_FILE | sed -e 's/keymap=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
  mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
  echo "keymap=$KEYMAP" >>$CONFIG_FILE
  ##sed -ri "s/^KEYMAP=.*/KEYMAP=$KEYMAP/" /etc/vconsole.conf
  ask_yesno "Change current keymap from $CURKEYMAP to $KEYMAP? $keymaplocale" || return 1
  rm /tmp/keymaps
  cat /etc/vconsole.conf | grep KEYMAP= >>/tmp/keymaps
  cp -f /tmp/keymaps $CONFIG_DIR
  chown arcade.nobody "$CONFIG_DIR" keymaps
  #localectl set-keymap $CURKEYMAP
  localectl set-keymap $KEYMAP
  KM=$(localectl)
  inform "$KM"
  sleep 5
  return 0
}

worker_file_manager() {
  mc
}

worker_start_fe() {
  # Setup X Windows
  if ! grep -qE "monitor=.+" /home/arcade/switchres.conf; then
    notify "video monitor setup"
    worker_select_monitor_menu
  fi

  # Multiple FE are not yet handled, but forcing FE= would be nice
  su arcade -c startx -- -nocursor vt7 &>/dev/null
}

worker_start_lxde() {
  # Setup X Windows
  if ! grep -qE "monitor=.+" /home/arcade/switchres.conf; then
    notify "video monitor setup"
    worker_select_monitor_menu
  fi

  # Multiple FE are not yet handled, but forcing FE= would be nice
  FE=lxde su arcade -c startx -- vt7 > /dev/null
}
worker_power_menu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Power Menu" "PowerOff/Restart/Suspend System" required \
      1 "Reiniciar" \
      2 "Desligar" \
      3 "Suspender" \
      4 "voltar" || return

    case $ANSWER_OPTION in
      "1") execute worker power_action Reboot && default=3 ;;
      "2") execute worker power_action PowerOff && default=3 ;;
      "3") execute worker power_action Suspend ;;
      "4") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}


worker_power_ativa() {




#!/bin/bash
file="/home/arcade/serial.ini"
while IFS= read -r line
do
echo "$line"


 dialog --title "SERIAL : $line" --backtitle "Envie o serial para 31 9 91195474"  --inputbox "" 8 60 2>/tmp/input.$$

done < "$file"
sel=$?

na=`cat /tmp/input.$$`
case $sel in
  0) echo "$na">/home/arcade/megatech_key.key ;;
  1) echo "Cancel is Press" ;;
  255) echo "[ESCAPE] key pressed" ;;
esac
  return 0
}


worker_power_atualizar() {

sudo chmod -R 777 /home/arcade/shared/frontends/attract
 
clear

git clone https://github.com/juliolimap/update.git
cd /home/arcade/update
sh /home/arcade/update/start.sh
sudo chmod -R 777 /home/arcade/shared/frontends/attract
}

 




worker_power_action() {
  action="${1,,}"
  ask_yesno "Confirmar $action Systema?" || return
  systemctl $action
  # brutal logoff, can't do any other way
  pkill -KILL -u $(whoami)
}

previous_setup() {
  # Data directory setup
  DATACFG=$(grep data= $CONFIG_FILE)
  DATAVALUE=$(echo $DATACFG | awk -F = '{print $2}')
  if [ "$DATAVALUE" != "" ]; then
    sudo umount $DATAVALUE >/dev/tty12 2>&1
    mount $DATAVALUE /home/roms
  fi
  # Swapfile setup
  SWAPCFG=$(grep swap= $CONFIG_FILE)
  SWAPVALUE=$(echo $SWAPCFG | awk -F = '{print $2}')
  if [ "$SWAPVALUE" != "" ]; then
    swapon $SWAPVALUE
  fi
  # Audio Setup
  VOLCFG=$(grep volume= $CONFIG_FILE)
  VOLVALUE=$(echo $VOLCFG | awk -F = '{print $2}')
  IS_ALSA=$(cat $CONFIG_FILE | grep alsa=)

  if [ "$VOLVALUE" != "" ]; then
    if [ "$IS_ALSA" = "" ]; then
      amixer sset -c $audiodev PCM 200 unmute 2>&1 0>&1 >/dev/null
      amixer sset -c $audiodev Master 100% unmute 2>&1 0>&1 >/dev/null
      amixer sset -c $audiodev Front 100% unmute 2>&1 0>&1 >/dev/null
      alsactl store $audiodev
    else
      audiodev=$(echo $IS_ALSA | awk -F = '{print $2}')
      if [ "$audiodev" = "" ]; then
        audiodev=0
      fi
      amixer sset -c $audiodev PCM 200 unmute 2>&1 0>&1 >/dev/null
      amixer sset -c $audiodev Master ${VOLVALUE}% unmute 2>&1 0>&1 >/dev/null
      amixer sset -c $audiodev Front ${VOLVALUE}% unmute 2>&1 0>&1 >/dev/null
      alsactl store $audiodev
    fi
  fi
  # Password setup
  PASSCFG=$(grep passwd= $CONFIG_FILE)
  PASSVALUE=$(echo $PASSCFG | awk -F = '{print $2}')
  if [ "$PASSVALUE" != "" ]; then
    echo arcade:$PASSVALUE | chpasswd
    echo root:$PASSVALUE | chpasswd
    #/opt/webmin/changepass.pl /etc/webmin admin $PASSVALUE
  fi
  # Network setup
  ###############if [ -f "$CONFIG_DIR/net" ]; then
  ###########cp -f $CONFIG_DIR/net /etc/conf.d/
  ###############fi
  ###############if [ -f "$CONFIG_DIR/wpa_supplicant.conf" ]; then
  ###########cp -f $CONFIG_DIR/wpa_supplicant.conf /etc/wpa_supplicant/
  ###############fi
  ###############NETCFG=$(grep network= $CONFIG_FILE)
  ###############NETVALUE=$(echo $NETCFG | awk -F = '{print $2}')
  ###############if [ "$NETVALUE" != "" ]; then
  ###########ln -s /etc/init.d/net.lo /etc/init.d/net.${NETVALUE}
  ###########rc-update add net.${NETVALUE} default
  ###########/etc/init.d/net.${NETVALUE} start
  ###########/etc/init.d/sshd restart
  ###############fi
  # X Windows
  if [ -f "$CONFIG_DIR/xorg.conf" ]; then
    cp -f $CONFIG_DIR/xorg.conf /etc/X11/
  fi
  # keymap
  if [ -f "$CONFIG_DIR/keymaps" ]; then
    CURKEYMAP=$(cat /etc/vconsole.conf | grep KEYMAP= | sed -e 's/KEYMAP=//g' | sed -e 's/\=//g')
    ##cp -f $CONFIG_DIR/keymaps /etc/vconsole.conf
    localectl set-keymap $CURKEYMAP
  fi
  return 0
}

worker_install_menu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Installation Menu" "Install Groovy Arcade Linux" required \
      1 "Install to Disk" \
      2 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker select_install && default=2 ;;
      "2") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}


worker_select_install() {
  if [ ! -d "/run/archiso/" ]; then
    notify "You aren't booting from a LiveCD so can't install."
    return 1
  fi

  if [ -d "/groovyarcade/etc" ]; then
    notify "You have already installed, cannot do it twice!!!"
    return 1
  fi
  DOING_INSTALL=1
  sudo umount /media/* >/dev/tty12 2>&1
  SETUP=1

  grep -qE "monitor=.+" "$SWITCHRES_CONF" && VIDEO_SETUP=1
  if [[ "$VIDEO_SETUP" == "0" ]]; then
    ask_yesno "Do you want to setup Video?" || SETUP=0
    if [ "$SETUP" = "1" ]; then
      worker_video_menu
    fi
  fi

  # Setup X Windows
  COUNT=0
  while [ ! -f "/etc/X11/xorg.conf" ] && ! grep -qE "monitor=.+" "$SWITCHRES_CONF" ; do
    notify "You must setup the Video Monitor type"
    worker_select_monitor_menu
    COUNT=$(expr $COUNT + 1)
    if [ "$COUNT" = "3" ]; then
      notify "X Windows setup failed, you must setup a monitor type!"
      return 1
    fi
  done
  SETUP=1

  # Get default kernel commandline, necessary for bootloaders
  tmp_val="$(grep "KERNEL_DEFAULT_CMDLINE=" /run/archiso/bootmnt/syslinux/syslinux.cfg)"
  default_cmdline=${tmp_val#*KERNEL_DEFAULT_CMDLINE=}
  # Get kernel parameters from ga.conf
  if [[ -f $CONFIG_FILE ]] && grep -q "^kernel_video_cmdline=" "$CONFIG_FILE"; then
    tmp_val="$(grep "^kernel_video_cmdline=" "$CONFIG_FILE")"
    kernel_video_params=${tmp_val#*kernel_video_cmdline=}
  fi

  RAN_AUTOPART=no
  worker_select_and_partition_disk || return 1
  RAN_AUTOPART=yes

  # arcade user autostart X Windows
  cat >/home/arcade/.bash_profile <<'EOF'
#!/bin/bash

if [[ $(tty) == /dev/tty1 ]] ; then
    source /opt/gatools/include/includes.sh
    xorg_opts=
    FE=$(get_config_value "$GA_CONF" frontend)
    if [[ $FE != lxde ]] ; then
        xorg_opts="-nocursor"
    fi
    sudo setterm -powerdown 0 -powersave off -blank 0
    startx -- $xorg_opts &> /dev/tty12
    sudo gasetup
fi

EOF

  # Copy data
  # This rsync is so much better but ... 8x slower
  # rsync --outbuf=N --progress --protocol=28 -aAXH /* /groovyarcade --exclude={/proc,/sys,/dev,/tmp,/run,/mnt,/media,/groovyarcade,/var/lib/dhcpcd} | grep -E "to-chk=[0-9]+/[0-9]+" | sed -rE "s|.*to-chk=([0-9]+/[0-9]+).*|100-100*\1|" | bc | dialog --title "Installing GroovyArcade" --gauge "Copying files..." 10 50
  # Had to disable stderr otherwise installing on UEFI produces a tremendous number of warning messages
  rsync --info=progress2 --protocol=28 -aAXH /* /groovyarcade --exclude={/proc,/sys,/dev,/tmp,/run,/mnt,/media,/groovyarcade,/var/lib/dhcpcd} 2>/dev/null| dialog --title "Installing GroovyArcade to $INSTALL_DRIVE" --progressbox 3 40
  mkdir /groovyarcade/{dev,proc,sys,tmp,run,mnt,media}
  rm -f /groovyarcade/home/arcade/1
  rm -Rf /groovyarcade/home/arcade/lost+found /groovyarcade/home/roms/lost+found
  chown -R arcade:arcade /groovyarcade/home/arcade

  # Find video output
  VIDEO=""
  INTEL=""
  KERNELCMD=$(cat /proc/cmdline)
  for karg in $KERNELCMD; do
    IS_VIDEO=$(echo $karg | grep video=)
    IS_INTEL=$(echo $karg | grep i915)
    if [ "$IS_VIDEO" != "" ]; then
      if [ "$VIDEO" != "" ]; then
        VIDEO="$VIDEO $karg"
      else
        VIDEO="$karg"
      fi
    fi
    if [ "$IS_INTEL" != "" ]; then
      if [ "$INTEL" != "" ]; then
        INTEL="$INTEL $karg"
      else
        INTEL="$karg"
      fi
    fi
  done

  # Grab the kernel only, the initramfs will be generated form the arch-chroot
  # The location depends on BIOS/EFI

  cp -va /run/archiso/bootmnt/groovyarcade/boot/$(uname -m)/vmlinuz* /groovyarcade/boot/
  cp -va /run/archiso/bootmnt/groovyarcade/boot/*-ucode.img /groovyarcade/boot/
  # Get rid of the fallback initramfs
  rm /groovyarcade/boot/initramfs-linux*-fallback.img

  # Create fstab -> read https://wiki.archlinux.org/index.php/Installation_guide#Fstab some day
  genfstab -L /groovyarcade > /groovyarcade/etc/fstab

  ## CHROOT: last bits of configuration on the destination drive
  inform "Final configuration steps"
  arch-chroot /groovyarcade /bin/bash --login <<CHROOTED
    cd /root/
    locale-gen -a
    [[ ! -d /sys/firmware/efi/efivars ]] && syslinux-install_update -i -a -m
    mv /etc/mkinitcpio-installed.conf /etc/mkinitcpio.conf
    mkinitcpio -p linux-15khz

    sed -i "s/^Storage=.*/Storage=persistent/" /etc/systemd/journald.conf
    mkdir /var/log/journal
    systemd-tmpfiles --create --prefix /var/log/journal

    systemctl disable pacman-init.service choose-mirror.service
    rm -r /etc/systemd/system/{choose-mirror.service,pacman-init.service,etc-pacman.d-gnupg.mount}
    rm /etc/systemd/scripts/choose-mirror

    rm /root/{.automated_script.sh,.zlogin}
    rm /etc/mkinitcpio-archiso.conf
    rm -r /etc/initcpio
CHROOTED

  # Set a working network interface for the network monitor in LXDE
  # But the file doesn't exist yet
  #iface=$(ip -br -c addr show | grep "UP" | head -1 | awk '{print $1}')
  #[[ -n $iface ]] && set_config_value /groovyarcade/home/arcade/.config/lxpanel-default/LXDE/panels/panel iface "$iface"
  ask_yesno "Installation finished, Do you want to reboot? (remove CDROM afterwards)" || DOING_INSTALL=0 return 0

  # Reboot system
  worker_power_action reboot

  DOING_INSTALL=0

  return 0
}

worker_audio_menu() {

  local default=no
  AUDIO_SETUP=1
  while [ 0 = 0 ]; do
    ask_option $default "Audio Setup Menu" "Setup Audio" required \
      1 "Default Card" \
      2 "Change Volume" \
      3 "AlsaMixer" \
      4 "Audio Latency MAME" \
      5 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker default_card && default=2 ;;
      "2") execute worker set_volume && default=3 ;;
      "3") execute worker alsamixer && default=4 ;;
      "4") execute worker audio_latency && default=5 ;;
      "5") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0

}

worker_alsamixer() {
  if ! alsa_card_num=$(get_config_value "$GA_CONF" alsa) ; then
    inform "Please select a default sound card first"
    sleep 2
    execute worker default_card
    alsa_card_num=$(get_config_value "$GA_CONF" alsa)
  fi
  alsamixer -c $alsa_card_num
  alsactl store $alsa_card_num
  return 0
}

worker_default_card() {
  audiodev=$(LANG=C aplay -l | grep ^card | sed -e "s/],.*//g" | sed -e "s/^card //g" | sed -e "s/://g" | awk '{printf("%s %s-%s \n", $1,$3,$4,$5)}' | sed -e "s/[[]//g" | uniq)
  ask_option $default "Select Sound Card" "Choose a Sound Card." required $audiodev || return 0
  DEF=$ANSWER_OPTION
  sed -ri "s/card.*/card $DEF/g" /home/arcade/.asoundrc
  set_config_value "$GA_CONF" alsa "$DEF"
  return 0
}

worker_audio_latency() {
  PREV=$(get_mame_config_value 'audio_latency')
  ask_string "Audio latency MAME\nDefault 2.0 , Max 2.0 Min 0" "$PREV" || return 0
  LAT=${ANSWER_STRING// /}
  set_mame_config_value audio_latency "$LAT"
  return 0
}

worker_set_volume() {
  IS_ALSA=$(cat $CONFIG_FILE | grep alsa=)
  CURVOL=$(cat $CONFIG_FILE | grep volume= | awk -F = '{print $2}')
  ask_string "Audio Volume (0-100)" "$CURVOL" || return 1
  VOLUME=${ANSWER_STRING// /}

  audiodev=$(echo $IS_ALSA | awk -F = '{print $2}')
  if [ "$audiodev" = "" ]; then
    audiodev=0
  fi
  amixer sset -c $audiodev PCM 200 unmute 2>&1 0>&1 >/dev/null
  amixer sset -c $audiodev Master ${VOLUME}% unmute 2>&1 0>&1 >/dev/null
  amixer sset -c $audiodev Front ${VOLUME}% unmute 2>&1 0>&1 >/dev/null
  alsactl store $audiodev

  cat $CONFIG_FILE | sed -e 's/volume=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
  mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
  echo "volume=$VOLUME" >>$CONFIG_FILE
  AUDIO_SETUP=1

  return 0
}

worker_set_alsa() {
  IS_ALSA=$(cat $CONFIG_FILE | grep alsa=)
  #if [ "$1" = "off" ]; then

  #mv /etc/modprobe.d/alsa_blacklist.conf /etc/modprobe.d/alsa_blacklist.DISABLED
  audiodev=$(aplay -l | grep ^card | grep Analog | head -1 | awk '{print $2}' | sed -e s/://g)
  if [ "$audiodev" = "" ]; then
    audiodev=0
  fi
  # Unmute audio and set volumes sanely
  amixer sset -c $audiodev PCM 200 unmute 2>&1 0>&1 >/dev/null
  amixer sset -c $audiodev Master 100% unmute 2>&1 0>&1 >/dev/null
  amixer sset -c $audiodev Front 100% unmute 2>&1 0>&1 >/dev/null
  alsactl store $audiodev

  cat $CONFIG_FILE | sed -e 's/alsa=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
  mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
  echo "alsa=$audiodev" >>$CONFIG_FILE

  return 0
}

worker_network_menu() {
  local default=no
  IFACES=$(ip link | grep BROADCAST | sed -e s/://g | awk '{printf("%s -\n", $2)}')

  while [ 0 = 0 ]; do
    ask_option $default "Network Setup Menu" "Setup Network" required \
      1 "WiFi setup (new)" \
      3 "Fix Network" \
      4 "Return to Main" || return
      #2 "Config Network" \

    # Disabled option 2. If people require manual settings, let them learn Linux
    case $ANSWER_OPTION in
      "1") execute worker configure_wifi ;;
      "2")
        ask_option $default "Setup Network Interface" "Choose an interface" required $IFACES "Cancel" "-" || return 1
        if [ "$ANSWER_OPTION" = "Cancel" ]; then
          #return 0
          execute worker network_menu
          return
        fi

        cat $CONFIG_FILE | sed -e 's/network=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
        mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
        echo "network=$ANSWER_OPTION" >>$CONFIG_FILE
        IFACE=$ANSWER_OPTION
        sudo ifconfig $IFACE up
        WIRED=yes
        file=wired

        ask_yesno "Is $IFACE a Wired Device?" || WIRED=no
        if [ "${WIRED}" = "no" ]; then
          ask_option $default "Setup Network ESSID" "Choose an ESSID" required \
            1 "Manual ESSID" \
            2 "Search ESSID" || return

          if [ $ANSWER_OPTION = "1" ]; then
            PREVSS=$(grep ssid= $CONFIG_FILE | awk -F = '{print $2}')
            ask_string "Wireless SSID:" "$PREVSS" || return 1
            #SSID=${ANSWER_STRING// /}
            SSID=$ANSWER_STRING
          else
            sudo ifconfig $IFACE down up
            LIST=$(iwlist $IFACE scanning | grep -i ESSI | sed -e s/ESSID://g | sed -e s/'"'//g | sed 's/^\s*//' | sed -e "s/ /+/g" | awk '{printf("%s -\n", $1)}')

            if [ "$LIST" = "" ]; then
              inform "Wireless Not Found"
              sleep 2
              return 0
            fi

            ask_option $default "List Wireless ESSID" "Choose a Wireless" required $LIST || return 1
            SSID=$(echo $ANSWER_OPTION | sed -e "s/+/ /g")
          fi

          PREVKEY=$(grep psk= $CONFIG_FILE | awk -F = '{print $2}')
          ask_string "Wireless Key:" "$PREVKEY" || return 1
          KEY=${ANSWER_STRING// /}

          ask_option $default "Wireless Security" "Select your Wireless Security" required \
            1 "Open" \
            2 "Wep" \
            3 "Wpa" || return

          case $ANSWER_OPTION in
            "1") SECURI=none ;;
            "2") SECURI=wep ;;
            "3") SECURI=wpa ;;
          esac

          cat $CONFIG_FILE | sed -e 's/ssid=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
          mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
          echo "ssid=$SSID" >>$CONFIG_FILE
          cat $CONFIG_FILE | sed -e 's/psk=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
          mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
          echo "psk=$KEY" >>$CONFIG_FILE
          execute worker disable_wiimote
          file=wifi
        fi
        cat $CONFIG_FILE | sed -e 's/wireless=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
        mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
        echo "wireless=$WIRED" >>$CONFIG_FILE

        #STATIC=yes
        DINAMIC=yes
        ask_yesno "Setup $IFACE with a dynamic IP?" || DINAMIC=no
        if [ "${DINAMIC}" = "no" ]; then
          ask_string "IP Address (192.168.0.1):" "" || return 1
          IPADDRESS=${ANSWER_STRING// /}
          ask_string "Gateway IP:" "" || return 1
          GATEWAY=${ANSWER_STRING// /}
          ask_string "DNS Server IP:" "" || return 1
          DNSSERVER=${ANSWER_STRING// /}
          ask_string "DNS Domain:" "" || return 1
          DNSDOMAIN=${ANSWER_STRING// /}
          DNSSEARCH=$DNSDOMAIN
        fi

        # Static IP
        if [ "${DINAMIC}" = "no" ]; then
          sed -ri "s/^IP=.*/IP=static/" /etc/netctl/$file
          sed -ri "s/^Interface=.*/Interface=$IFACE/" /etc/netctl/$file
          sed -ri "s/^[#]*Address=.*/Address='${IPADDRESS}\/24\'/" /etc/netctl/$file
          sed -ri "s/^[#]*Gateway='.*/Gateway='${GATEWAY}'/" /etc/netctl/$file
          sed -ri "s/^[#]*DNS=.*/DNS=('${DNSSERVER}')/" /etc/netctl/$file

          sed -ri "s/^nameserver.*//" /etc/resolv.conf
          sed -ri '/^$/d' /etc/resolv.conf
          echo "nameserver ${DNSSERVER}" >>/etc/resolv.conf
          echo "nameserver ${DNSDOMAIN}" >>/etc/resolv.conf

        else
          sed -ri "s/^IP=.*/IP=dhcp/" /etc/netctl/$file
          sed -ri "s/^Interface=.*/Interface=$IFACE/" /etc/netctl/$file
          sed -ri "s/^Address=.*/Address=''/" /etc/netctl/$file
          sed -ri "s/^Gateway='.*/Gateway=''/" /etc/netctl/$file
          sed -ri "s/^[#]*DNS=.*/DNS=('8.8.8.8')/" /etc/netctl/$file
          sed -ri "s/^nameserver.*//" /etc/resolv.conf
          sed -ri '/^$/d' /etc/resolv.conf

        fi

        if [ "${WIRED}" = "no" ]; then
          #	echo "modules=( \"wpa_supplicant\" )" >> /etc/conf.d/net
          #	echo "wpa_supplicant_${IFACE}=\"-Dwext\"" >> /etc/conf.d/net
          #cat /etc/wpa_supplicant.conf.origin \
          #	|sed -e s/ssid=\"\"/ssid=\"${SSID}\"/g \
          #	|sed -e s/psk=\"\"/psk=\"${KEY}\"/g \
          #		> /etc/wpa_supplicant.conf

          sed -ri "s/^[#]*ESSID='.*/ESSID='${SSID}'/" /etc/netctl/$file
          sed -ri "s/^[#]*Security=.*/Security=${SECURI}/" /etc/netctl/$file
          sed -ri "s/^[#]*Key='.*/Key='${KEY}'/" /etc/netctl/$file
          sed -ri "s/^Connection=.*/Connection=wireless/" /etc/netctl/$file

        #	cp -f /etc/wpa_supplicant/wpa_supplicant.conf $CONFIG_DIR/
        else

          sed -ri "s/^ESSID='.*/#ESSID=''/" /etc/netctl/$file
          sed -ri "s/^Security=.*/#Security=wpa/" /etc/netctl/$file
          sed -ri "s/^Key='.*/#Key=''/" /etc/netctl/$file
          sed -ri "s/^Connection=.*/Connection=ethernet/" /etc/netctl/$file

        fi

        ask_yesno "Bring up $IFACE interface?" || return

        ISUP=$(ifconfig | grep $IFACE)
        if [ "${ISUP}" = "" ]; then
          notify "Net Not Found"
        else
          #netctl reenable $file
          #netctl stop-all
          #systemctl restart netctl@static.service
          if [ "${DINAMIC}" = "yes" -a "${WIRED}" = "no" ]; then
            ifconfig $IFACE down
            dhcpcd -x 2>>/dev/tty12
            sleep 2
          fi
          if [ "${WIRED}" = "no" ]; then
            netctl stop $file
            systemctl stop netctl@wifi.service
            netctl disable $file 2>>/dev/tty12
            dhcpcd -x 2>>/dev/tty12
            ifconfig $IFACE down
          fi
          netctl restart $file
          ifconfig $IFACE up
          systemctl restart sshd.service
          systemctl restart smb.service nmb.service
          netctl enable $file 2>>/dev/tty12
          ips=$(ifconfig $IFACE | grep -oiE '([0-9]{1,3}\.){3}[0-9]{1,3}' | grep -v 255 | grep -v 127.0.0.1)
          gate=$(ip route show | grep -oiE '([0-9]{1,3}\.){3}[0-9]{1,3}' -m 1)
          dnes=$(cat /etc/resolv.conf | grep -oiE '([0-9]{1,3}\.){3}[0-9]{1,3}')
          notify "Interface ${IFACE} is already running.\n\nIP ${ips}\nGW $gate\nDNS $dnes\n\n"

        fi
        NETWORK_SETUP=1
        return 0
        ;;
      "3") execute worker fix_network && default=3 ;;
      "4") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

}

worker_fix_network() {
  local default=no
  VIDEO_SETUP=1
  while [ 0 = 0 ]; do
    ask_option $default "Video Setup Menu" "Setup video" required \
      1 "Default Network" \
      2 "Enable Or Disable Wiimote" \
      3 "Time Out DHCP" \
      4 "Return to Main" || return

    case $ANSWER_OPTION in
      "1")
        netctl stop-all
        systemctl stop netctl@wifi.service netctl@wire.service
        systemctl disable netctl@wifi.service netctl@wire.service
        dhcpcd -x 2>>/dev/tty12
        netctl disable wifi
        netctl disable wired
        sudo rm /etc/netctl/{wifi,wired}
        sudo touch /etc/netctl/{wifi,wired}
        sudo chown arcade:users /etc/netctl/{wifi,wired}

        sudo echo "Description='A basic static ethernet connection'
Connection=ethernet
Interface=eth0
IP=static
Address=('192.168.1.69/24')
#Routes=('192.168.0.0/24 via 192.168.1.2')
Gateway='192.168.1.1'
DNS=('8.8.8.8')
SkipNoCarrier=yes
ForceConnect=yes" >>/etc/netctl/wired 2>>/dev/tty12

        sudo echo "Description='A basic static wireless connection'
Connection=wireless
Interface=wlan0
Security=none
IP=static
ESSID='MyNetwork'
Key=''
Address='192.168.1.70/24'
Gateway='192.168.1.1'
DNS=('8.8.8.8')
ForceConnect=yes" >>/etc/netctl/wifi 2>>/dev/tty12

        notify "Now Your Network Config Is Default\n\n\n"

        default=2
        ;;
      "2") execute worker disable_wiimote && default=3 ;;
      "3")
        TOUT=$(grep "^[#]*DefaultTimeoutStartSec=" /etc/systemd/system.conf | awk -F = '{print $2}')
        ask_string "Time Out DHCP (0s-90s)" "$TOUT" || return 1
        OUTT=${ANSWER_STRING// /}
        sed -ri "s/^[#]*DefaultTimeoutStartSec=.*/DefaultTimeoutStartSec=$OUTT/" /etc/systemd/system.conf
        default=4
        ;;
      "4") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done
  return 0
}

worker_select_passwd() {
  PASSWD=1
  PASSWD2=2
  notify "Choose a password for the Root and Arcade users."
  while [ "$PASSWD" != "$PASSWD2" ]; do
    ask_string "Arcade Password:" "" || return 1
    PASSWD=${ANSWER_STRING// /}
    ask_string "Confirm Password:" "" || return 1
    PASSWD2=${ANSWER_STRING// /}
    if [ "$PASSWD" != "$PASSWD2" ]; then
      notify "Passwords do not match! Try again."
    fi
  done

  cat $CONFIG_FILE | sed -e 's/passwd=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
  mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
  echo "passwd=$PASSWD" >>$CONFIG_FILE

  ask_yesno "Set root and arcade users password to $PASSWD?" || return
  inform "Setting password for arcade and root users..."

  echo arcade:$PASSWD | chpasswd
  echo root:$PASSWD | chpasswd
  /usr/local/bin/changepass.pl /etc/webmin admin $PASSWD

  return 0
}

worker_partition_disks() {
  local default=no
  sigue=1
  #inform "Stopping Automount..."
  ask_yesno "Do you want to stop Automount?" || sigue=0
  if [ "$sigue" = "1" ]; then
    sudo umount /media/* >/dev/tty12 2>&1
    sigue=1
  fi
  sudo umount /media/* >/dev/tty12 2>&1
  DISKS=$(fdisk -l | grep ^Disk\ / | sed -e 's/://g' | sed -e 's/,//g' | awk '{printf("%s %s%s\n", $2, $3, $4)}')
  if [ "$DISKS" = "" ]; then
    notify "No drives available to partition"
    return 0
  fi
  while [ 0 = 0 ]; do
    ask_option $default "Partition Drives" "Choose a drive to partition" required $DISKS \
      "Done" "-" || return 1

    if [ "$ANSWER_OPTION" = "Done" ]; then
      ask_yesno "Do you want to start Automount?" || sigue=0
      if [ "$sigue" = "1" ]; then
        sudo systemctl start devmon@arcade.service
      fi
      return 0
    fi

    inform "Running cfdisk on $ANSWER_OPTION..."
    cfdisk $ANSWER_OPTION
  done
  return 0
}


function pass_value() {
  a=$1
  b=$2
  c=$3
  inform "$a $b"

  vA=$(grep -i $a $b)

  vB=$(cat $b | grep $a | awk '{print $2}')
  inform "valor vb $vB"
  sleep 3

  return $vA $vB $vC

}


initial_switchres() {
  # First setup of switchres.conf
  if [ ! -f "/home/arcade/switchres.conf" ]; then
    inform "Creating switchres.conf config..."
    touch /home/arcade/switchres.conf
    chown arcade.nobody /home/arcade/switchres.conf

    echo "threads=1" >>/home/arcade/switchres.conf
    echo "ff=1" >>/home/arcade/switchres.conf
  fi
}


worker_select_frontend() {
  local default=no
  local fe_map
  # list FE, build the array for the ask_option
  fe_list="$(ls -1 "$MOTHER_OF_ALL"/frontends)"
  i=1
  declare -A fe_array
  for fe in $fe_list ; do
    fe_array[$i]=$fe
    fe_map+=($i $fe)
    i=$((i+1))
  done
  # Add the default LXDE
  fe_array[$i]="lxde"
  fe_map+=($i "lxde")
  i=$((i+1))
  fe_map+=($i "Return to Main")
  # From now on, $i points to Return to Main
  
  while true ; do
    ask_option $default "Front-End Setup Menu" "Setup Front End/Window Manager" required "${fe_map[@]}" || return
    [[ $ANSWER_OPTION == $i ]] && return 0
    if [[ ${fe_array[$ANSWER_OPTION]+_} ]] ; then 
      set_config_value "$GA_CONF" frontend ${fe_array[$ANSWER_OPTION]}
      ret=$?
      notify "Switched to ${fe_array[$ANSWER_OPTION]} Front End\n\n\n\n"
      unset fe_map
      unset fe_array
      return $ret
    else 
      notify "Bad option $ANSWER_OPTION given"
    fi
  done
  return 0
}

create_xinit() {
  FILE=/home/arcade/.xinitrc

  touch $FILE
  chown arcade.nobody $FILE
  cat > $FILE << EOF
xhost +
xset s noblank
xset m 5/2 0
xset s off
xset -dpms

openbox --config-file ~/.config/GAop.xml &
/opt/galauncher/startfe.sh
EOF
  return 0
}

worker_setup_advmenu() {
  create_xinit advmenu

  echo "openbox --config-file ~/.config/GAop.xml &" >>/home/arcade/.xinitrc
  if [ "$1" != "" ]; then
    echo "$1 &" >>/home/arcade/.xinitrc
  fi
  echo "advmenu" >>/home/arcade/.xinitrc
  sudo sed -ri "s/startx.*/startx \-- -nocursor\ \&>\\/dev\/tty12\ /g" /home/arcade/.bash_profile

  [ "$1" = "" ] && notify "Switched to AdvanceMENUPlus Front End\n\n\n\n"
  return 0
}

worker_setup_attractmode() {
  set_config_value "$GA_CONF" frontend attract
  ret=$?
  notify "Switched to AttractMode Front End\n\n\n\n"
  return $ret
}

worker_setup_lxde() {
  if [ ! -f "/usr/bin/startlxde" ]; then
    notify "LXDE Desktop isn't installed on this ISO build"
    return 1
  fi

  create_xinit

  sudo sed -ri "s/startx[[:space:]].*/startx \&> /dev/null/g" /home/arcade/.bash_profile

  [ "$1" != "" ] && echo "$1 &" >>/home/arcade/.xinitrc
  echo "startlxde" >>/home/arcade/.xinitrc
  [ "$1" = "" ] && notify "Switched to LXDE Window Manager\n\n\n\n"
  return 0
}

worker_setup_wahcade() {
  create_xinit

  echo "if [ ! -d \".wahcade\" ]; then" >>/home/arcade/.xinitrc
  echo "	startlxde" >>/home/arcade/.xinitrc
  echo "	wahcade-setup" >>/home/arcade/.xinitrc
  echo "else" >>/home/arcade/.xinitrc
  echo "openbox --config-file ~/.config/GAop.xml &" >>/home/arcade/.xinitrc
  echo "	wahcade" >>/home/arcade/.xinitrc
  echo "fi" >>/home/arcade/.xinitrc

  sudo sed -ri "s/startx[[:space:]].*/startx/g" /home/arcade/.bash_profile

  notify "Switched to WahCade Front End\nWahCade Setup will run the first time\nYou will need to use Lxde to run setup after that"
  return 0
}


worker_boot_custom() {
  local default=no
  ask_option $default "Custom Video Boot" "" required \
    1 "320x240@60-15Khz" \
    2 "640x480@60-15Khz" \
    3 "720x480@59-15Khz" \
    4 "760x576@60-15Khz" \
    5 "800x600@50-15Khz" \
    6 "1032@768@40-15Khz" \
    7 "320x240@60-25Khz" \
    8 "512x384@58-25Khz" \
    9 "800x600@60-25Khz" \
    10 "1024x768@50-25Khz" \
    11 "640x480@60-31Khz" || return
  case $ANSWER_OPTION in
    "1") VBMODE="328 240 60" ;;
    "2") VBMODE="648 480 60" ;;
    "3") VBMODE="728 480 59" ;;
    "4") VBMODE="768 576 60" ;;
    "5") VBMODE="808 600 60" ;;
    "6") VBMODE="1032 768 60" ;;
    *) notify "Bad option $ANSWER_OPTION given" ;;
  esac

  notify "Video Mode Select $VBMODE"

  return 0
}


worker_mindotclock() {
  MDOT=$(grep "^[#]*dotclock_min" /home/arcade/mame.ini | awk '{print $2}')
  ask_string "Change MinDotClock\nDefault=0 Recommend=8" "$MDOT" || return 1
  MDOTT=${ANSWER_STRING// /}
  sed -ri "s/^[#]*dotclock_min.*/dotclock_min 			  $MDOTT/" /home/arcade/mame.ini
  return 0
}

worker_select_swap() {
  local default=no
  DRIVES=$(fdisk -l | grep ^/dev/ | grep "82 Linux swap" | grep -v $AUTO_DRIVE | sed -e s/\*//g | awk '{printf("%s %s\n", $1, $4)}')
  if [ "$DRIVES" = "" ]; then
    notify "No drives are available to use"
    return 0
  fi
  ask_option $default "Swap Partition" "Choose a drive" required $DRIVES || return 1

  cat $CONFIG_FILE | sed -e 's/swap=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
  mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
  echo "swap=$ANSWER_OPTION" >>$CONFIG_FILE

  ask_yesno "Setup $ANSWER_OPTION as swap space?" || return
  inform "Creating swap space on $ANSWER_OPTION partition..."
  mkswap -L SwapSpace $ANSWER_OPTION
  inform "Starting swap space..."
  swapon $ANSWER_OPTION
  SWAP_DRIVE=$ANSWER_OPTION

  return 0
}

worker_select_home() {
  local default=no
  if [ ! -f "/home/arcade/1" ]; then
    notify "Home directory is already mounted"
    ask_yesno "Unmount and use another drive?" || return 0
    umount /home/arcade
  fi
  DRIVES=$(fdisk -l | grep ^/dev/ | grep "83 Linux" | grep -v $AUTO_DRIVE | sed -e s/\*//g | awk '{printf("%s %s\n", $1, $4)}')
  if [ "$DRIVES" = "" ]; then
    notify "No drives are available to use"
    return 0
  fi
  ask_option $default "Home Partition" "Choose a drive" required $DRIVES || return 1

  if [ "$ROMS_DRIVE" = "$ANSWER_OPTION" ]; then
    notify "You cannot use the same drive for the Home drive as the Roms drive"
    return 1
  fi

  HOME_DRIVE=$ANSWER_OPTION

  cat $CONFIG_FILE | sed -e 's/home=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
  mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
  echo "home=$ANSWER_OPTION" >>$CONFIG_FILE

  FORMAT=yes
  ask_yesno "Format $ANSWER_OPTION partion?\nWarning! All data will be erased!!!" || FORMAT=no
  if [ "$FORMAT" = "yes" ]; then
    inform "Formatting $ANSWER_OPTION partition"
    mkfs.ext4 -O ^64bit -q $ANSWER_OPTION
    e2label $ANSWER_OPTION /home/arcade
  fi

  ask_yesno "Mount $ANSWER_OPTION /home/arcade?" || return
  inform "Creating /home/arcade directory..."
  if [ ! -d "/home/arcade.default" ]; then
    mv /home/arcade /home/arcade.default
  fi
  mkdir /home/arcade
  chown arcade.nobody /home/arcade
  sudo umount $ANSWER_OPTION >/dev/tty12 2>&1
  mount $ANSWER_OPTION /home/arcade
  inform "Copying default arcade users files to /home/arcade/"
  cp -rpda /home/arcade.default/. /home/arcade/
  chown -R arcade.nobody /home/arcade
  rm -f /home/arcade/1
  rm -rf /home/arcade.default
  inform "Done creating /home/arcade user directory"

  return 0
}

worker_select_roms() {
  local default=no
  if [ ! -f "/home/roms/1" ]; then
    notify "ROMs/Snaps directory is already mounted"
    ask_yesno "Unmount and use another drive?" || return 0
    umount /home/roms
  fi
  DRIVES=$(fdisk -l | grep ^/dev/ | grep -v "Linux swap" | grep -v "Extended" | grep -v $AUTO_DRIVE | sed -e s/\*//g | awk '{printf("%s %s\n", $1, $4)}')
  if [ "$DRIVES" = "" ]; then
    notify "No drives are available to use"
    return 0
  fi
  ask_option $default "Rom/Snap Partition" "Choose a drive" required $DRIVES || return 1

  if [ "$HOME_DRIVE" = "$ANSWER_OPTION" ]; then
    notify "You cannot use the same drive for Roms as the Home drive"
    return 1
  fi

  ROMS_DRIVE=$ANSWER_OPTION

  cat $CONFIG_FILE | sed -e 's/data=.*//g' | grep -v ^$ >${CONFIG_FILE_TMP}
  mv ${CONFIG_FILE_TMP} ${CONFIG_FILE}
  echo "data=$ANSWER_OPTION" >>$CONFIG_FILE

  FORMAT=yes
  ask_yesno "Format $ANSWER_OPTION partion?\nWarning! All data will be erased!!!" || FORMAT=no
  if [ "$FORMAT" = "yes" ]; then
    inform "Formatting $ANSWER_OPTION partition"
    mkfs.ext4 -F -q $ANSWER_OPTION
    e2label $ANSWER_OPTION /home/roms
  fi

  ROM_FSTYPE=$(fdisk -l | grep $ANSWER_OPTION | awk '{print $6}')
  if [ "$ROM_FSTYPE" != "Linux" ]; then
    #EXTRA_MOUNT_OPTS="-o uid=1000,gid=1000"
    EXTRA_MOUNT_OPTS="-o rw"
  fi

  ask_yesno "Mount $ANSWER_OPTION /home/roms?" || return
  inform "Mounting Rom/Snap partition $ANSWER_OPTION in /home/roms/"

  if [ -f "/home/roms/1" -a ! -d "/home/roms.default" ]; then

    mv -f /home/roms /home/roms.default

    mkdir /home/roms
    chown -Rf arcade.nobody /home/roms
    chmod 777 /home/roms
  fi

  chown -Rf arcade.nobody /home/roms
  chmod 777 /home/roms
  sudo umount $ANSWER_OPTION >/dev/tty12 2>&1
  mount $ANSWER_OPTION $EXTRA_MOUNT_OPTS /home/roms
  notify "Drive is mounted under /home/roms/"

  CROMS=yes
  if [ -d "/home/roms.default" ]; then
    ask_yesno "Do you want COPY default ROMS files to /home/roms?" || CROMS=no
    if [ "$CROMS" = "yes" ]; then
      inform "Copying default ROMS files"
      cp -rpda /home/roms.default/. /home/roms/
      chown -Rf arcade.nobody /home/roms
      rm -f /home/roms/1
      rm -rf /home/roms.default
    fi
  #DROMS=yes
  #ask_yesno "Do you want DELETE Backup previous ROMS files?" || DROMS=no
  #if [ "$DROMS" = "yes" ]; then
  #inform "Deleting default ROMS files"
  #rm -rf /home/roms.default
  #fi
  fi
  inform "Done creating /home/roms user directory"

  return 0
}

worker_intro() {
  notify "Welcome to Groovy Arcade Linux Setup.\n\n\
 First you should go through the Setup Menu for setting up the basic system.\
 Second you can choose to run the LiveCD or do a disk drive installation.\
 You can view all output from commands by viewing your VC7 console (ALT-F7).\
 ALT-F1 will bring you back here, and ALT-F2 to get a console command prompt.\
 \n\n$DISCLAIMER"
}

worker_configure() {
  var_UI_TYPE=${arg_ui_type:-dia}
  ui_init
}

create_devmap() {
  if [ ! -f "$TMP_DEV_MAP" ]; then
    inform "Generating GRUB device map...\nThis could take a while.\n\n Please be patient."
    /sbin/grub --no-floppy --device-map $TMP_DEV_MAP >/tmp/grub.log 2>&1 <<EOF
quit
EOF
  fi
  return 0
}

worker_msg_report() {
  notify "Type gasetup at the command prompt to re-enter installer"
  stop_installer 0
}

worker_abort_installer() {
  ret=0
  ask_yesno "Sair do setup?" || return
  #maybe_interactive_rollback_filesystems || ret=$?
  stop_installer || ret=$?
  return $ret
}

worker_extras_menu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Update" "Update" required \
      1 "GroovyMAME Update" \
      2 "AdvmenuPlus Update" \
      3 "AttractMode Update" \
      4 "Gasetup Menu Update" \
      5 "Scripts Menu Update" \
      6 "System Update" \
      7 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker updatega groovy && default=2 ;;
      "2") execute worker updatega advmenu && default=3 ;;
      "3") execute worker updatega attract && default=4 ;;
      "4") execute worker updatemenu && default=5 ;;
      "5") execute worker updatega scripts && default=6 ;;
      "6") execute worker updatega system && default=7 ;;
      "7") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}

worker_updatega() {
  local default=no
  gro=""
  gdrive=""
  utmp="/home/arcade/Update"
  cd $utmp
  rm UpdateGA >/dev/tty12 2>&1
  [ "$1" = groovy ] && MSG=GroovyMame
  [ "$1" = advmenu ] && MSG=AdvmenuPlus
  [ "$1" = attract ] && MSG=AttractMode
  [ "$1" = scripts ] && MSG=Scripts
  [ "$1" = system ] && MSG=System

  ask_option $default "Update from" "" required \
    1 "Online Site" \
    2 "Local Site" || return
  case $ANSWER_OPTION in
    "1")
      gdrivedl "https://drive.google.com/open?id=0B0NB2HYUHHktZmUwVXNucnRVS2c" >/dev/tty12 2>&1
      gro=$(grep -ri "$1*" $utmp/UpdateGA | cut -d " " -f1 | awk '{printf("%s -\n", $1)}')
      gdrive="1"
      ;;
    "2") gro=$(find -iname "*$1*" | sed -e s/.\.// | awk '{printf("%s -\n", $1)}') ;;
  esac

  ask_option $default "Update $MSG" "Choose a $MSG binary." required $gro "Cancel" "-" || return 1
  if [ "$ANSWER_OPTION" = "Cancel" ]; then
    return 0
  fi

  link=$(grep -ri "$ANSWER_OPTION" $utmp/UpdateGA | cut -d " " -f2)
  clear
  inform "Downloading "$ANSWER_OPTION""
  sleep 2

  if [ "$gdrive" = "1" ]; then
    gdrivedl "$link" >/dev/tty12 2>&1
  fi

  inform "Updating $MSG to version $ANSWER_OPTION"
  ht=$(tar tf $ANSWER_OPTION | grep howto.sh)

  if [ "$ht" = "howto.sh" ]; then
    rm -Rf /tmp/howto*
    tar xvf $ANSWER_OPTION -C /tmp/ >/dev/tty12 2>&1
    cd /tmp/
    sudo chmod 777 * >/dev/tty12 2>&1
    sh howto.sh
  fi

  if [ ! -f "/tmp/howto.sh" ]; then
    tar xvf $ANSWER_OPTION -C /usr/local/bin/ >/dev/tty12 2>&1
    sudo chmod 777 /usr/local/bin/* $utmp/* >/dev/tty12 2>&1
  else

    sh howto.sh

  fi

  return 0
}

worker_updategroovy() {
  #UpdateGroovyMame.sh
  local default=no
  gro=""
  gdrive=""
  utmp="/home/arcade/Update"
  cd $utmp
  rm UpdateGMU
  ask_option $default "Update from" "" required \
    1 "Online Site" \
    2 "Local Site" || return
  case $ANSWER_OPTION in
    "1")
      gdrivedl "https://drive.google.com/open?id=0B0NB2HYUHHktZmUwVXNucnRVS2c" >/dev/tty12 2>&1
      gro=$(grep -ri "groovy*" $utmp/UpdateGMU | cut -d " " -f1 | awk '{printf("%s -\n", $1)}')
      gdrive="1"
      ;;
    "2") gro=$(ls *groovy* | awk '{printf("%s -\n", $1)}') ;;
  esac

  ask_option $default "Update GroovyMAME" "Choose a GroovyMAME binary." required $gro "Cancel" "-" || return 1
  if [ "$ANSWER_OPTION" = "Cancel" ]; then
    return 0
  fi
  link=$(grep -ri "$ANSWER_OPTION" $utmp/UpdateGMU | cut -d " " -f2)
  clear
  inform "Downloading "$ANSWER_OPTION""
  sleep 2
  #cd $utmp
  #rm -Rf groov* Groov* howto*
  if [ $gdrive = "1" ]; then
    gdrivedl "$link" >/dev/tty12 2>&1
  fi
  inform "Updating GroovyMAME to version $ANSWER_OPTION"

  if [ ! -f "/tmp/howto.sh" ]; then
    tar xvf $ANSWER_OPTION -C /usr/local/bin/ >/dev/tty12 2>&1
    sudo chmod 777 /usr/local/bin/* $utmp/* >/dev/tty12 2>&1
  else

    sh howto.sh

  fi

  return 0
}

worker_updateadvmenu() {
  local default=no
  gro=""
  link=""
  gdrive=""
  cd /tmp/
  rm UpdateADV
  ask_option $default "Update from" "" required \
    1 "New Web Site" \
    2 "Old Web Site" || return
  case $ANSWER_OPTION in
    "1")
      url="https://googledrive.com/host/0B0NB2HYUHHktRjRaVmVqM2lpalU/"
      drive="1"
      ;;
    "2") url="http://groovyarcade.googlecode.com/files/" ;;
  esac
  wget $url"UpdateADV" >/dev/tty12 2>&1
  gro=$(grep -ri "advme*" /tmp/UpdateADV | cut -d " " -f1 | awk '{printf("%s -\n", $1)}')
  ask_option $default "Update AdvmenuPlus" "Choose an AdvmenuPlus binary." required $gro "Cancel" "-" || return 1
  if [ "$ANSWER_OPTION" = "Cancel" ]; then
    return 0
  fi
  link=$(grep -ri "$ANSWER_OPTION" /tmp/UpdateADV | cut -d " " -f2)
  clear
  inform "Downloading "$ANSWER_OPTION""
  sleep 5
  cd /tmp/
  rm -Rf advmenup* Advmenup* howto*
  if [ $gdrive = "1" ]; then
    wget $link >/dev/tty12 2>&1
  else
    wget $url$ANSWER_OPTION >/dev/tty12 2>&1
  fi
  inform "Updating AdvmenuPlus to version $ANSWER_OPTION"
  tar xvf $ANSWER_OPTION

  if [ ! -f "/tmp/howto.sh" ]; then
    tar xvf $ANSWER_OPTION -C /usr/local/bin/
    sudo chmod 777 /usr/local/bin/*
  else

    sh howto.sh

  fi

  return 0
}

worker_updatemenu() {

  clear
  cd /tmp/
  sudo rm -f UpdateGasetup
  inform "Downloading Gasetup\n"
  sleep 2
  gdrivedl "https://drive.google.com/open?id=0B0NB2HYUHHktX2xQUmlJcUdPSXc" >/dev/tty12 2>&1
  local=$(grep ^VERSION= /opt/gasetup/core/procedures/interactive | sed -e s/^VERSION=\//g)
  update=$(grep ^VERSION= /tmp/UpdateGasetup | sed -e s/^VERSION=\//g)
  inform "Local version $local New version $update\n\n"
  sleep 2
  if [ $update -gt $local ]; then
    COPIA=$(sudo cp /tmp/UpdateGasetup /opt/gasetup/core/procedures/interactive)
    inform "Updating Gasetup to Version $update"
    sleep 2
    inform "Gasetup successfully updated! Please reboot Gasetup Menu"
    sleep 4
  else
    inform "Gasetup update failed!\n\n"
    sleep 2
  fi
  return 0
}

worker_updatescripts() {
  clear
  cd /tmp/
  rm UpdateScripts* howto*
  wget https://googledrive.com/host/0B0NB2HYUHHktRjRaVmVqM2lpalU/UpdateScripts.tar.bz2 >/dev/tty12 2>&1
  inform "Updating Scripts $ANSWER_OPTION"
  tar xvf $ANSWER_OPTION

  if [ ! -f "/tmp/howto.sh" ]; then
    tar xvf $ANSWER_OPTION -C /usr/local/bin/
    sudo chmod 777 /usr/local/bin/*
  else

    sh howto.sh

  fi

  #Updatemenu.sh
  return 0
}

worker_updatesystem() {
  inform "Coming Soon"
  sleep 4
  if [ ! -f "/tmp/howto.sh" ]; then
    tar xvf $ANSWER_OPTION -C /usr/local/bin/
    sudo chmod 777 /usr/local/bin/*
  else

    sh howto.sh

  fi
}

worker_joystick_menu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Joystick" "" required \
      1 "Wiimote Options" \
      2 "OpenPPJOY & Pc2Jamma Setup" \
      3 "Ps3/4 Options" \
      4 "Xbox Options" \
      5 "Antimicro Autostart" \
      6 "Qjoy Autostart" \
      7 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker wiimote_menu && default=2 ;;
      "2") execute worker openppjoy && default=3 ;;
      "3") notify "Not Available Yet\n\n" && default=4 ;;
      "4") notify "Not Available Yet\n\n" && default=5 ;;
      "5") execute worker joy2key antimicro && default=7 ;;
      "6") execute worker joy2key qjoypad && default=7 ;;
      "7") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}

worker_wiimote_menu() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Wiimote" "" required \
      1 "Wiimote MAC Detect" \
      2 "Wiimote Event Change" \
      3 "Wiimote Enable/Disable" \
      4 "...." \
      5 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker detectwiimote && default=2 ;;
      "2") execute worker eventwiimote && default=3 ;;
      "3") execute worker disable_wiimote && default=4 ;;
      "4") notify "Not Available Yet\n\n" && default=5 ;; ##execute worker none        && default=5 ;;
      "5") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done

  return 0
}

worker_eventwiimote() {
  clear
  echo "Search Wiimote events:"
  EVENT=$(evtestlist | grep "Wiimote" | cut -d":" -f1)
  WIIMO=$(evtestlist | grep "Wiimote" | cut -f2)
  if [ "$EVENT" != "" ]; then
    inform "$WIIMO $EVENT\n\n"
    sleep 6
    nano -R /etc/X11/xorg.conf
  else
    inform "Not detected Wiimote\n\n"
    sleep 2
  fi

  return 0
}

worker_disable_wiimote() {
  ask_option $default "Setup Wiimote Interface" "If you have a problemm with Wifi Disable Wiimote" required "Enable" "-" "Disable" "-" || return 1

  if [ "$ANSWER_OPTION" = "Enable" ]; then
    sudo systemctl enable wiimote 2>>/dev/tty12
  else
    sudo systemctl disable wiimote 2>>/dev/tty12
  fi

  return 0

}
worker_openppjoy() {
  clear
  nano -R /etc/modules-load.d/openppjoy.conf
  return 0
}

worker_joy2key() {
  notify "Please Configure $1 from Lxde\n\n\n"
  ENV=$(grep -e advmenu -e startlxde -e attract /home/arcade/.xinitrc)
  if [ "$ENV" == "" ]; then
    ENV="advmenu"
  fi
  [ "$ENV" = advmenu ] && worker_setup_advmenu $1
  [ "$ENV" = attract ] && worker_setup_attractmode $1
  [ "$ENV" = startlxde ] && worker_setup_lxde $1

  notify "$1 Activated start with $ENV\n\n\n"

  FOUND=$(grep -e 'antimicro' -e 'qjoypad' /home/arcade/.xinitrc)
  if [ "$FOUND" != "" ]; then
    STATUS="Enable"
    DIS="yes"
    ask_yesno "$1 is $STATUS, \nDo you want Disable?" || DIS=no
    if [ "$DIS" = "yes" ]; then
      sudo sed -ri "s/^$FOUND.*//g" /home/arcade/.xinitrc
      STATUS="Disable"
    fi
  else
    STATUS="Disable"
  fi
  notify "$1 Daemon is $STATUS\n\n"
  return 0
}

worker_detectwiimote() {
  local default=no
  while [ 0 = 0 ]; do
    ask_option $default "Wiimote detect" "" required \
      1 "Wiimote 1 MAC "$wa"" \
      2 "Wiimote 2 MAC "$wb"" \
      3 "Return to Main" || return

    case $ANSWER_OPTION in
      "1") execute worker wiimoteA && default=2 ;;
      "2") execute worker wiimoteB && default=3 ;;
      "3") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac
  done
  return 0
}

worker_foundblue() {
  return

}

worker_wiimoteA() {
  sudo systemctl stop wiimote 2>>/dev/tty12
  foundblu=$(sudo bt-adapter -i 2>&1 | grep -o 'hci[0-9]')
  if [ "$foundblu" == "" ]; then
    inform "Bluetooth no detect or unsupport	\n\n"
    sleep 2
    return
  else

    clear
    inform "Detecting Wiimote 1 MAC...\n\n"
    while [ "$wa" = "" ]; do
      sleep 1
      clear
      wa=$(lswm)
      sleep 5
    done
    inform "Wiimote MAC "$wa""
    sleep 2
    sudo sed -ri "s/^Wiimote1=.*/Wiimote1=\"$wa\"/" /usr/local/bin/wiimote
    sudo systemctl start wiimote
    sudo chmod 777 /dev/uinput
    sudo chmod 777 /dev/input/*
  fi

}

worker_wiimoteB() {
  sudo systemctl stop wiimote 2>>/dev/tty12
  foundblu=$(sudo bt-adapter -i 2>&1 | grep -o 'hci[0-9]')
  if [ "$foundblu" == "" ]; then
    inform "Bluetooth no detect or unsupport	\n\n"
    sleep 2
    return
  else
    clear
    inform "Detecting Wiimote 2 MAC...\n\n"
    while [ "$wb" = "" ]; do
      sleep 1
      clear
      wb=$(lswm)
      sleep 5
    done
    inform "Wiimote MAC "$wb""
    sleep 2
    sudo sed -ri "s/^Wiimote2=.*/Wiimote2=\"$wb\"/" /usr/local/bin/wiimote
    sudo systemctl start wiimote
    sudo chmod 777 /dev/uinput
    sudo chmod 777 /dev/input/*
  fi
}

worker_confidiroms() {
  local default=no
  emu=""
  while [ 0 = 0 ]; do
    ask_option $default "Set emulator's ROM path." "Select an emulator, then set its ROM path." required \
      1 "GroovyMAME" \
      2 "Super Nintendo" \
      3 "Nintendo64" \
      4 "Nintendo Entertainment System" \
      5 "Sega Megadrive/Genesis" \
      6 "Sega Master System" \
      7 "Atari 2600" \
      8 "PSX" \
      9 "PCE-SuperGrafx" \
      10 "Saturn" \
      11 "MAME - BIOS" \
      12 "MAME - Super Nintendo" \
      13 "MAME - Nintendo64" \
      14 "MAME - Nintendo Entertainment System" \
      15 "MAME - Sega Megadrive / Genesis" \
      16 "MAME - Sega Master System" \
      17 "MAME - Atari 2600" \
      18 "MAME - PSX" \
      19 "MAME - PCE-SuperGrafx" \
      20 "MAME - Saturn" \
      21 "MAME - 3DO" \
      22 "MAME - Jaguar" \
      23 "MAME - NeoGeoCDZ" \
      24 "MAME - AmigaCD" \
      25 "MAME - MegaCD" \
      26 "MAME - 32X" \
      27 "Generate All List Attract-Mode" \
      28 "Set all paths to default" \
      29 "Return to main" || return

    case $ANSWER_OPTION in
      "1") emu=Mame && default=2 ;;
      "2") emu=Snes && default=3 ;;
      "3") emu=N64 && default=4 ;;
      "4") emu=Nes && default=5 ;;
      "5") emu=Mg/Gs && default=6 ;;
      "6") emu=Ms && default=7 ;;
      "7") emu=Atari && default=8 ;;
      "8") emu=Psx && default=9 ;;
      "9") emu=Pce && default=10 ;;
      "10") emu=Saturn && default=11 ;;
      "11") emu=UME-BIOS && default=12 ;;
      "12") emu=UME-Snes && default=13 ;;
      "13") emu=UME-N64 && default=14 ;;
      "14") emu=UME-Nes && default=15 ;;
      "15") emu=UME-Mg/Gs && default=16 ;;
      "16") emu=UME-Ms && default=17 ;;
      "17") emu=UME-Atari && default=18 ;;
      "18") emu=UME-Psx && default=19 ;;
      "19") emu=UME-Pce && default=20 ;;
      "20") emu=UME-Saturn && default=21 ;;
      "21") emu=UME-3do && default=22 ;;
      "22") emu=UME-Jaguar && default=23 ;;
      "23") emu=UME-Neocd && default=24 ;;
      "24") emu=UME-Amigacd && default=25 ;;
      "25") emu=UME-Megacd && default=26 ;;
      "26") emu=UME-32x && default=27 ;;
      "27") emu=attlist && default=28 ;;
      "28") emu=DEFAULT && default=29 ;;
      "29") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac

    if [ "$emu" == "DEFAULT" ]; then
      #sed -ri "s@^rompath.*@rompath                   /home/roms/MAME/roms;@g" /home/arcade/mame.ini
      sed -ri "s@^rompath.*@rompath                   /home/roms/BIOS_roms;/home/roms/MAME/roms;@g" /home/arcade/mame.ini
      sed -ri "s@^emulator_roms \"MAME.*@emulator_roms \"MAME\" \"/home/roms/MAME/roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"N64.*@emulator_roms \"N64\" \"/home/roms/N64_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"NES.*@emulator_roms \"NES\" \"/home/roms/NES_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"SNES.*@emulator_roms \"SNES\" \"/home/roms/SNES_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"SegaGenesis.*@emulator_roms \"SegaGenesis\" \"/home/roms/SegaGenesis_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"MasterSystem.*@emulator_roms \"MasterSystem\" \"/home/roms/Master_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"Atari.*@emulator_roms \"Atari2600\" \"/home/roms/Atari2600_roms\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^emulator_roms \"PSX.*@emulator_roms \"PSX\" \"/home/roms/PSX_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"PCEngine-Supergrafx.*@emulator_roms \"PCEngine-Supergrafx\" \"/home/roms/PCE_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"Saturn.*@emulator_roms \"Saturn\" \"/home/roms/Saturn_roms\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^emulator_roms \"UME-N64.*@emulator_roms \"UME-N64\" \"/home/roms/N64_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-NES.*@emulator_roms \"UME-NES\" \"/home/roms/NES_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-SNES.*@emulator_roms \"UME-SNES\" \"/home/roms/SNES_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-SegaGenesis.*@emulator_roms \"UME-SegaGenesis\" \"/home/roms/SegaGenesis_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-Sega32X.*@emulator_roms \"UME-Sega32X\" \"/home/roms/32X_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-SegaMegaCD.*@emulator_roms \"UME-SegaMegaCD\" \"/home/roms/MegaCD_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-MasterSystem.*@emulator_roms \"UME-MasterSystem\" \"/home/roms/Master_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-Atari.*@emulator_roms \"UME-Atari2600\" \"/home/roms/Atari2600_roms\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^emulator_roms \"UME-PCEngine-Supergrafx.*@emulator_roms \"UME-PCEngine-Supergrafx\" \"/home/roms/PCE_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-3DO.*@emulator_roms \"UME-3DO\" \"/home/roms/3DO_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-PSX.*@emulator_roms \"UME-PSX\" \"/home/roms/PSX_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-Saturn.*@emulator_roms \"UME-Saturn\" \"/home/roms/Saturn_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-NeoGeoCDZ.*@emulator_roms \"UME-NeoGeoCDZ\" \"/home/roms/NeoCD_roms\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_roms \"UME-AmigaCD.*@emulator_roms \"UME-AmigaCD\" \"/home/roms/AmigaCD_roms\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^rompath.*@rompath              \/home/roms/MAME/roms\/@g" /home/arcade/.attract/emulators/MAME.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/N64_roms\/@g" /home/arcade/.attract/emulators/N64.cfg /home/arcade/.attract/emulators/UME-N64.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/NES_roms\/@g" /home/arcade/.attract/emulators/NES.cfg /home/arcade/.attract/emulators/UME-NES.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/SNES_roms\/@g" /home/arcade/.attract/emulators/SNES.cfg /home/arcade/.attract/emulators/UME-SNES.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/SegaGenesis_roms\/@g" /home/arcade/.attract/emulators/SegaGenesis.cfg /home/arcade/.attract/emulators/UME-SegaGenesis.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/Master_roms\/@g" /home/arcade/.attract/emulators/MasterSystem.cfg /home/arcade/.attract/emulators/UME-MasterSystem.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/Atari2600_roms\/@g" /home/arcade/.attract/emulators/Atari2600.cfg /home/arcade/.attract/emulators/UME-Atari2600.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/PSX_roms\/@g" /home/arcade/.attract/emulators/PSX.cfg /home/arcade/.attract/emulators/UME-PSX.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/PCEngine-Supergrafx_roms\/@g" /home/arcade/.attract/emulators/PCEngine-Supergrafx.cfg /home/arcade/.attract/emulators/UME-PCEngine-Supergrafx.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/Saturn_roms\/@g" /home/arcade/.attract/emulators/Saturn.cfg /home/arcade/.attract/emulators/UME-Saturn.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/3DO_roms\/@g" /home/arcade/.attract/emulators/UME-3DO.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/NeoCD_roms\/@g" /home/arcade/.attract/emulators/UME-NeoGeoCDZ.cfg
      sed -ri "s@^rompath.*@rompath              \/home/roms/AmigaCD_roms\/@g" /home/arcade/.attract/emulators/UME-AmigaCD.cfg

      su arcade attlist.sh &>/dev/tty12

      notify "All ROM paths are now set to default."

    fi

    if [ "$emu" == "attlist" ]; then
      su arcade attlist.sh &>/dev/tty12
    fi

    if [ "$emu" != "attlist" -a "$emu" != "DEFAULT" ]; then
      execute worker SelectRS $emu roms
    fi
  done
  return 0
}

worker_confidirsnaps() {
  local default=no
  emu=""
  while [ 0 = 0 ]; do
    ask_option $default "Set emulator's Snap path." "Select an emulator, then set its Snap path." required \
      1 "GroovyMAME" \
      2 "Super Nintendo" \
      3 "Nintendo64" \
      4 "Nintendo Entertainment System" \
      5 "Sega Megadrive/Genesis" \
      6 "Sega Master System" \
      7 "Atari 2600" \
      8 "PSX" \
      9 "PCE-SuperGrafx" \
      10 "Saturn" \
      11 "MAME - Super Nintendo" \
      12 "MAME - Nintendo64" \
      13 "MAME - Nintendo Entertainment System" \
      14 "MAME - Sega Megadrive / Genesis" \
      15 "MAME - Sega Master System" \
      16 "MAME - Atari 2600" \
      17 "MAME - PSX" \
      18 "MAME - PCE-SuperGrafx" \
      19 "MAME - Saturn" \
      20 "MAME - 3DO" \
      21 "MAME - Jaguar" \
      22 "MAME - NeoGeoCDZ" \
      23 "MAME - AmigaCD" \
      24 "MAME - MegaCD" \
      25 "MAME - 32X" \
      26 "Set all paths to default" \
      27 "Return to main" || return

    case $ANSWER_OPTION in
      "1") emu=Mame && default=2 ;;
      "2") emu=Snes && default=3 ;;
      "3") emu=N64 && default=4 ;;
      "4") emu=Nes && default=5 ;;
      "5") emu=Mg/Gs && default=6 ;;
      "6") emu=Ms && default=7 ;;
      "7") emu=Atari && default=8 ;;
      "8") emu=Psx && default=9 ;;
      "9") emu=Pce && default=10 ;;
      "10") emu=Saturn && default=11 ;;
      "11") emu=UME-Snes && default=12 ;;
      "12") emu=UME-N64 && default=13 ;;
      "13") emu=UME-Nes && default=14 ;;
      "14") emu=UME-Mg/Gs && default=15 ;;
      "15") emu=UME-Ms && default=16 ;;
      "16") emu=UME-Atari && default=17 ;;
      "17") emu=UME-Psx && default=18 ;;
      "18") emu=UME-Pce && default=19 ;;
      "19") emu=UME-Saturn && default=20 ;;
      "20") emu=UME-3do && default=21 ;;
      "21") emu=UME-Jaguar && default=22 ;;
      "22") emu=UME-Neocd && default=23 ;;
      "23") emu=UME-Amigacd && default=24 ;;
      "24") emu=UME-Megacd && default=25 ;;
      "25") emu=UME-32x && default=26 ;;
      "26") emu=DEFAULT && default=27 ;;
      "27") return 0 ;;
      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac

    if [ "$emu" == "DEFAULT" ]; then
      sed -ri "s@^emulator_altss \"MAME.*@emulator_altss \"MAME\" \"/home/roms/MAME/snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"N64.*@emulator_altss \"N64\" \"/home/roms/N64_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"NES.*@emulator_altss \"NES\" \"/home/roms/NES_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"SNES.*@emulator_altss \"SNES\" \"/home/roms/SNES_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"SegaGenesis.*@emulator_altss \"SegaGenesis\" \"/home/roms/SegaGenesis_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"MasterSystem.*@emulator_altss \"MasterSystem\" \"/home/roms/Master_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"Atari.*@emulator_altss \"Atari2600\" \"/home/roms/Atari2600_snaps\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^emulator_altss \"PSX.*@emulator_altss \"PSX\" \"/home/roms/PSX_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"PCEngine-Supergrafx.*@emulator_altss \"PCEngine-Supergrafx\" \"/home/roms/PCE_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"Saturn.*@emulator_altss \"Saturn\" \"/home/roms/Saturn_snaps\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^emulator_altss \"UME-N64.*@emulator_altss \"UME-N64\" \"/home/roms/N64_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-NES.*@emulator_altss \"UME-NES\" \"/home/roms/NES_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-SNES.*@emulator_altss \"UME-SNES\" \"/home/roms/SNES_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-SegaGenesis.*@emulator_altss \"UME-SegaGenesis\" \"/home/roms/SegaGenesis_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-SegaMegaCD.*@emulator_altss \"UME-SegaMegaCD\" \"/home/roms/MegaCD_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-Sega32X.*@emulator_altss \"UME-Sega32X\" \"/home/roms/32X_snaps\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^emulator_altss \"UME-MasterSystem.*@emulator_altss \"UME-MasterSystem\" \"/home/roms/Master_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-Atari.*@emulator_altss \"UME-Atari2600\" \"/home/roms/Atari2600_snaps\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^emulator_altss \"UME-PCEngine-Supergrafx.*@emulator_altss \"UME-PCEngine-Supergrafx\" \"/home/roms/PCE_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-3DO.*@emulator_altss \"UME-3DO\" \"/home/roms/3DO_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-PSX.*@emulator_altss \"UME-PSX\" \"/home/roms/PSX_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-Saturn.*@emulator_altss \"UME-Saturn\" \"/home/roms/Saturn_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-NeoGeoCDZ.*@emulator_altss \"UME-NeoGeoCDZ\" \"/home/roms/NeoCD_snaps\"@g" /home/arcade/.advance/advmenup.rc
      sed -ri "s@^emulator_altss \"UME-AmigaCD.*@emulator_altss \"UME-AmigaCD\" \"/home/roms/AmigaCD_snaps\"@g" /home/arcade/.advance/advmenup.rc

      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/MAME/snaps\/@g" /home/arcade/.attract/emulators/MAME.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/N64_snaps\/@g" /home/arcade/.attract/emulators/N64.cfg /home/arcade/.attract/emulators/UME-N64.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/NES_snaps\/@g" /home/arcade/.attract/emulators/NES.cfg /home/arcade/.attract/emulators/UME-NES.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/SNES_snaps\/@g" /home/arcade/.attract/emulators/SNES.cfg /home/arcade/.attract/emulators/UME-SNES.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/SegaGenesis_snaps\/@g" /home/arcade/.attract/emulators/SegaGenesis.cfg /home/arcade/.attract/emulators/UME-SegaGenesis.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/Master_snaps\/@g" /home/arcade/.attract/emulators/MasterSystem.cfg /home/arcade/.attract/emulators/UME-MasterSystem.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/Atari2600_snaps\/@g" /home/arcade/.attract/emulators/Atari2600.cfg /home/arcade/.attract/emulators/UME-Atari2600.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/PSX_snaps\/@g" /home/arcade/.attract/emulators/PSX.cfg /home/arcade/.attract/emulators/UME-PSX.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/PCEngine-Supergrafx_snaps\/@g" /home/arcade/.attract/emulators/PCEngine-Supergrafx.cfg /home/arcade/.attract/emulators/UME-PCEngine-Supergrafx.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/Saturn_snaps\/@g" /home/arcade/.attract/emulators/Saturn.cfg /home/arcade/.attract/emulators/UME-Saturn.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/3DO_snaps\/@g" /home/arcade/.attract/emulators/UME-3DO.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/NeoCD_snaps\/@g" /home/arcade/.attract/emulators/UME-NeoGeoCDZ.cfg
      sed -ri "s@^artwork    screen.*@artwork    screen              \/home/roms/AmigaCD_snaps\/@g" /home/arcade/.attract/emulators/UME-AmigaCD.cfg

      notify "All Snap paths are now set to default."

    fi

    if [ "$emu" != "DEFAULT" ]; then
      execute worker SelectRS $emu snaps
    fi
  done
  return 0
}

worker_MakeRSCache() {
  CACHE=""
  if [ -f "/home/arcade/.config/cache$1" ]; then
    ask_yesno "Previous Cache Detected, Do you want use?" || CACHE=no
    if [ "$CACHE" = "no" ]; then
      sudo rm /home/arcade/.config/cache$1
    else
      if [ "$1" = roms ]; then
        execute worker confidiroms
        return 0
      else
        execute worker confidirsnaps
        return 0
      fi
    fi
  fi

  if [ "$1" = roms ]; then
    ask_option $default "How to Search" "Choose an Options" required "Normal path search (filter: *roms)" "-" "Full path search  (filter: *roms*)" "-" || return 0

    case $ANSWER_OPTION in
      "Normal path search (filter: *roms)")
        inform "Searching your system for potential ROMs paths..."
        sleep 2
        if [ ! -f "/home/arcade/.config/cacheroms" ]; then
          dir=$(find /media/ /home/roms/ -type d -iname '*roms*' | awk '{printf("%s -\n", $1)}' >>/home/arcade/.config/cacheroms)
        fi
        ;;

      "Full path search  (filter: *roms*)")
        inform "Searching your system for potential ROMs paths..."
        sleep 2
        if [ ! -f "/home/arcade/.config/cacheroms" ]; then
          dir=$(find /media/ /home/roms/ -type d -iwholename '*roms*' | sed 's/ /·/g' | awk '{printf("%s -\n", $0)}' >>/home/arcade/.config/cacheroms)
        fi
        ;;

      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac

    execute worker confidiroms

  else
    ask_option $default "How to Search" "Choose an Options" required "Normal path search (filter: *snaps)" "-" "Full path search  (filter: *snaps*)" "-" || return 0

    case $ANSWER_OPTION in
      "Normal path search (filter: *snaps)")
        inform "Searching your system for potential Snaps paths..."
        sleep 2
        if [ ! -f "/home/arcade/.config/cachesnaps" ]; then
          dir=$(find /media/ /home/roms/ -type d -iname '*snap*' | awk '{printf("%s -\n", $1)}' >>/home/arcade/.config/cachesnaps)
        fi
        ;;
      "Full path search  (filter: *snaps*)")
        inform "Searching your system for potential Snaps paths..."
        sleep 2
        if [ ! -f "/home/arcade/.config/cachesnaps" ]; then
          dir=$(find /media/ /home/roms/ -type d -iwholename '*snap*' | sed 's/ /·/g' | awk '{printf("%s -\n", $0)}' >>/home/arcade/.config/cachesnaps)
        fi
        ;;

      *) notify "Bad option $ANSWER_OPTION given" ;;
    esac

    execute worker confidirsnaps

    return 0

  fi
}

worker_SelectRS() {
  if [ "$2" = roms ]; then

    dir=$(sudo cat /home/arcade/.config/cacheroms)

    ask_option $default "Potential ROM paths found." "Choose a ROM path for "$emu"" required $dir "Cancel" "-" || return 0

    if [ "$ANSWER_OPTION" = "Cancel" ]; then
      return 0
    fi
    clear
    inform "Adding new ROM path "$ANSWER_OPTION""
    sleep 1
    romdir.sh $ANSWER_OPTION $1
    return 0

  else

    dir=$(cat /home/arcade/.config/cachesnaps)

    ask_option $default "Potential Snaps paths found." "Choose a Snaps path for "$emu"" required $dir "Cancel" "-" || return 0

    if [ "$ANSWER_OPTION" = "Cancel" ]; then
      return 0
    fi
    clear
    inform "Added new Snaps path "$ANSWER_OPTION""
    sleep 1
    snapdir.sh $ANSWER_OPTION $1
    return 0
  fi
}
